{
    "name": "dwh_Template",
    "properties": {
        "type": "MappingDataFlow",
        "typeProperties": {
            "sources": [
                {
                    "linkedService": {
                        "referenceName": "asql_arirt",
                        "type": "LinkedServiceReference"
                    },
                    "name": "StagingAX5"
                },
                {
                    "linkedService": {
                        "referenceName": "asql_arirt",
                        "type": "LinkedServiceReference"
                    },
                    "name": "DimAXCompany"
                },
                {
                    "linkedService": {
                        "referenceName": "asql_arirt",
                        "type": "LinkedServiceReference"
                    },
                    "name": "ExistingRecords"
                },
                {
                    "linkedService": {
                        "referenceName": "asql_arirt",
                        "type": "LinkedServiceReference"
                    },
                    "name": "StagingAX7"
                }
            ],
            "sinks": [
                {
                    "dataset": {
                        "referenceName": "dwh_fact_GLTransactions",
                        "type": "DatasetReference"
                    },
                    "name": "FactSink"
                }
            ],
            "transformations": [
                {
                    "name": "LookupAXCompany"
                },
                {
                    "name": "CreateHashKey"
                },
                {
                    "name": "SCDAttributes"
                },
                {
                    "name": "SetUpsert"
                },
                {
                    "name": "Union"
                },
                {
                    "name": "TypeNames"
                },
                {
                    "name": "ReplaceNulls"
                },
                {
                    "name": "RestoreNames"
                },
                {
                    "name": "AX5"
                },
                {
                    "name": "LookupExisting"
                },
                {
                    "name": "FilterUnchanged"
                },
                {
                    "name": "SelectRequired"
                },
                {
                    "name": "AX7"
                }
            ],
            "script": "parameters{\n\tAuditKey as integer\n}\nsource(output(\n\t\tGLTransactionAlternateKey as string,\n\t\tAXCompanyID as string,\n\t\tGLTransactionVoucherID as string,\n\t\tGLTransactionTxt as string,\n\t\tGLTransactionDate as date,\n\t\tGLTransactionEntryDate as date,\n\t\tGLTransactionQuantity as decimal(28,12),\n\t\tGLTransactionAmountMST as decimal(28,12)\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tformat: 'query',\n\tstore: 'sqlserver',\n\tquery: 'select\\n\tLT.[DATAAREAID] + \\'-\\' + cast(LT.[RECID] as nvarchar) as GLTransactionAlternateKey\\n\t,LT.[DATAAREAID] as AXCompanyID\\n\t,LT.[VOUCHER] as GLTransactionVoucherID\\n\t,LT.[TXT] as GLTransactionTxt\\n\t,cast(LT.[TRANSDATE] as date) as GLTransactionDate\\n\t,cast(LT.[CREATEDDATETIME] as date) as GLTransactionEntryDate\\n\t,LT.[QTY] as GLTransactionQuantity\\n\t,LT.[AMOUNTMST] as GLTransactionAmountMST\\nfrom stg_ax5.LEDGERTRANS LT',\n\tisolationLevel: 'READ_UNCOMMITTED') ~> StagingAX5\nsource(output(\n\t\tAXCompanyKey as integer,\n\t\tAXCompanyID as string,\n\t\tAXCompanyDataSource as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tformat: 'query',\n\tstore: 'sqlserver',\n\tquery: 'select\\n    AXCompanyKey,\\n    cast(AXCompanyID as nvarchar) as AXCompanyID,\\n    AXCompanyDataSource\\nfrom [dwh_dim].[AXCompany]',\n\tisolationLevel: 'READ_UNCOMMITTED') ~> DimAXCompany\nsource(output(\n\t\tGLTransactionAlternateKey as string,\n\t\tGLTransactionDataSource as string,\n\t\tInsertAuditKey as integer,\n\t\tHashKey as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tformat: 'query',\n\tstore: 'sqlserver',\n\tquery: 'select\\n    GLTransactionAlternateKey,\\n    GLTransactionDataSource,\\n    InsertAuditKey,\\n    HashKey\\nfrom [dwh_fact].[GLTransactions]',\n\tisolationLevel: 'READ_UNCOMMITTED') ~> ExistingRecords\nsource(output(\n\t\tGLTransactionAlternateKey as string,\n\t\tAXCompanyID as string,\n\t\tGLTransactionVoucherID as string,\n\t\tGLTransactionTxt as string,\n\t\tGLTransactionDate as date,\n\t\tGLTransactionEntryDate as date,\n\t\tGLTransactionQuantity as decimal(28,12),\n\t\tGLTransactionAmountMST as decimal(28,12)\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'query',\n\tstore: 'sqlserver',\n\tquery: 'select\\n\tLT.[DATAAREAID] + \\'-\\' + cast(LT.[RECID] as nvarchar) as GLTransactionAlternateKey\\n\t,LT.[DATAAREAID] as AXCompanyID\\n\t,LT.[VOUCHER] as GLTransactionVoucherID\\n\t,LT.[TXT] as GLTransactionTxt\\n\t,cast(LT.[TRANSDATE] as date) as GLTransactionDate\\n\t,cast(LT.[CREATEDDATETIME] as date) as GLTransactionEntryDate\\n\t,LT.[QTY] as GLTransactionQuantity\\n\t,LT.[AMOUNTMST] as GLTransactionAmountMST\\nfrom stg_ax5.LEDGERTRANS LT',\n\tisolationLevel: 'READ_UNCOMMITTED') ~> StagingAX7\nUnion, DimAXCompany lookup(GLTransactionDataSource == AXCompanyDataSource\n\t&& lower(trim(Union@AXCompanyID)) == lower(trim(DimAXCompany@AXCompanyID)),\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupAXCompany\nRestoreNames derive(HashKey = md5(\r\n    GLTransactionDataSource,\r\n    GLTransactionAlternateKey,\r\n    GLTransactionVoucherID,\r\n    GLTransactionTxt,\r\n    GLTransactionDate,\r\n    GLTransactionEntryDate,\r\n    GLTransactionQuantity,\r\n    GLTransactionAmountMST,\r\n    AXCompanyKey\r\n)) ~> CreateHashKey\nSelectRequired derive(InsertAuditKey = iifNull(InsertAuditKey, $AuditKey),\n\t\tUpdateAuditKey = $AuditKey,\n\t\tIsDeleted = false()) ~> SCDAttributes\nSCDAttributes alterRow(upsertIf(true())) ~> SetUpsert\nAX5, AX7 union(byName: true)~> Union\nLookupAXCompany select(mapColumn(\n\t\tGLTransactionDataSource,\n\t\tGLTransactionAlternateKey,\n\t\tGLTransactionVoucherID_s = GLTransactionVoucherID,\n\t\tGLTransactionTxt_s = GLTransactionTxt,\n\t\tGLTransactionDate_dt = GLTransactionDate,\n\t\tGLTransactionEntryDate_dt = GLTransactionEntryDate,\n\t\tGLTransactionQuantity_dc = GLTransactionQuantity,\n\t\tGLTransactionAmountMST_dc = GLTransactionAmountMST,\n\t\tAXCompanyKey_k = AXCompanyKey\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> TypeNames\nTypeNames derive(each(match(endsWith(name,'_s')), $$ = iif(isNull($$) || length($$) == 0 , '--', toString($$))),\n\t\teach(match(endsWith(name,'_i')), $$ = iifNull(toInteger($$), toInteger(0))),\n\t\teach(match(endsWith(name,'_bt')), $$ = iifNull(toBoolean($$), false())),\n\t\teach(match(endsWith(name,'_dc')), $$ = iifNull(toDouble($$), toDouble(0))),\n\t\teach(match(endsWith(name,'_dt')), $$ = iifNull(toDate(toString($$)), toDate('1900-01-01'))),\n\t\teach(match(endsWith(name,'_k')), $$ = iifNull(toInteger($$), toInteger(-1)))) ~> ReplaceNulls\nReplaceNulls select(mapColumn(\n\t\teach(match(true()),\n\t\t\tregexReplace($$,'_..?$','') = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RestoreNames\nStagingAX5 derive(GLTransactionDataSource = 'AX5') ~> AX5\nCreateHashKey, ExistingRecords lookup(RestoreNames@GLTransactionAlternateKey == ExistingRecords@GLTransactionAlternateKey\n\t&& RestoreNames@GLTransactionDataSource == ExistingRecords@GLTransactionDataSource,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupExisting\nLookupExisting filter(isNull(ExistingRecords@HashKey) || CreateHashKey@HashKey != ExistingRecords@HashKey) ~> FilterUnchanged\nFilterUnchanged select(mapColumn(\n\t\teach(match(stream != 'ExistingRecords')),\n\t\tInsertAuditKey\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRequired\nStagingAX7 derive(GLTransactionDataSource = 'AX7') ~> AX7\nSetUpsert sink(allowSchemaDrift: false,\n\tvalidateSchema: true,\n\tinput(\n\t\tGLTransactionKey as integer,\n\t\tGLTransactionAlternateKey as string,\n\t\tGLTransactionDataSource as string,\n\t\tAXCompanyKey as integer,\n\t\tGLAccountKey as integer,\n\t\tGLJournalKey as integer,\n\t\tGLTransactionTypeKey as integer,\n\t\tGLPostingTypeKey as integer,\n\t\tVendorKey as integer,\n\t\tBusinessUnitKey as integer,\n\t\tGLCountryKey as integer,\n\t\tCostCenterKey as integer,\n\t\tProductLineKey as integer,\n\t\tGLVerticalKey as integer,\n\t\tEmployeeKey as integer,\n\t\tGLTransactionDate as date,\n\t\tGLTransactionEntryDate as date,\n\t\tGLTransactionVoucherID as string,\n\t\tGLTransactionTxt as string,\n\t\tGLTransactionQuantity as integer,\n\t\tGLTransactionAmountMST as decimal(19,4),\n\t\tGLTransactionAmountEUR as decimal(19,4),\n\t\tInsertAuditKey as integer,\n\t\tUpdateAuditKey as integer,\n\t\tHashKey as string,\n\t\tIsDeleted as boolean\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['GLTransactionAlternateKey','GLTransactionDataSource'],\n\tformat: 'table',\n\tpreSQLs:['IF NOT EXISTS (SELECT 1 FROM [dwh_dim].[AXCompany]) BEGIN\\nSET IDENTITY_INSERT [dwh_dim].[AXCompany] ON\\nINSERT INTO [dwh_dim].[AXCompany] (\\n\t[AXCompanyKey]\\n\t,[AXCompanyDataSource]\\n\t,[AXCompanyAlternateKey]\\n\t,[AXCompanyName]\\n\t,[AXCompanyOriginalName]\\n\t,[AXCompanyID]\\n\t,[AXCompanyDefaultCurrency]\\n\t,[IsCurrent]\\n\t,[ModifiedDate]\\n\t,[StartDate]\\n\t,[EndDate]\\n\t,[HashKey]\\n\t,[AuditKey]\\n)\\nVALUES (\\n\t-1\\n\t,\\'--\\'\\n\t,\\'--\\'\\n\t,\\'--\\'\\n\t,\\'--\\'\\n\t,-1\\n\t,\\'--\\'\\n\t,1\\n\t,GETDATE()\\n\t,GETDATE()\\n\t,\\'9999-12-31\\'\\n\t,\\'--\\'\\n\t,0\\n)\\nSET IDENTITY_INSERT [dwh_dim].[AXCompany] OFF\\nend'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tGLTransactionAlternateKey,\n\t\tGLTransactionDataSource,\n\t\tAXCompanyKey,\n\t\tGLTransactionDate,\n\t\tGLTransactionEntryDate,\n\t\tGLTransactionVoucherID,\n\t\tGLTransactionTxt,\n\t\tGLTransactionQuantity,\n\t\tGLTransactionAmountMST,\n\t\tInsertAuditKey,\n\t\tUpdateAuditKey,\n\t\tHashKey,\n\t\tIsDeleted\n\t)) ~> FactSink"
        }
    }
}